// Mocks generated by Mockito 5.4.4 from annotations
// in remote_staff_control/test/repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:remote_staff_control/data/datasources/remote/client_datasource.dart'
    as _i3;
import 'package:remote_staff_control/data/datasources/remote/report_datasource.dart'
    as _i7;
import 'package:remote_staff_control/data/datasources/remote/user_datasource.dart'
    as _i9;
import 'package:remote_staff_control/domain/model/client.dart' as _i6;
import 'package:remote_staff_control/domain/model/report.dart' as _i8;
import 'package:remote_staff_control/domain/model/user.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClientDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientDataSource extends _i1.Mock implements _i3.ClientDataSource {
  MockClientDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.Future<List<_i6.Client>> getClients() => (super.noSuchMethod(
        Invocation.method(
          #getClients,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Client>>.value(<_i6.Client>[]),
      ) as _i5.Future<List<_i6.Client>>);

  @override
  _i5.Future<bool> addClient(_i6.Client? client) => (super.noSuchMethod(
        Invocation.method(
          #addClient,
          [client],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateClient(_i6.Client? client) => (super.noSuchMethod(
        Invocation.method(
          #updateClient,
          [client],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteClient(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteClient,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [ReportDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportDataSource extends _i1.Mock implements _i7.ReportDataSource {
  MockReportDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.Future<List<_i8.Report>> getReports() => (super.noSuchMethod(
        Invocation.method(
          #getReports,
          [],
        ),
        returnValue: _i5.Future<List<_i8.Report>>.value(<_i8.Report>[]),
      ) as _i5.Future<List<_i8.Report>>);

  @override
  _i5.Future<bool> addReport(_i8.Report? report) => (super.noSuchMethod(
        Invocation.method(
          #addReport,
          [report],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateReport(_i8.Report? report) => (super.noSuchMethod(
        Invocation.method(
          #updateReport,
          [report],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteReport(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteReport,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> patchReport(
    int? reportId,
    int? newRating,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchReport,
          [
            reportId,
            newRating,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [UserDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDataSource extends _i1.Mock implements _i9.UserDataSource {
  MockUserDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.Future<List<_i10.User>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i5.Future<List<_i10.User>>.value(<_i10.User>[]),
      ) as _i5.Future<List<_i10.User>>);

  @override
  _i5.Future<bool> addUser(_i10.User? user) => (super.noSuchMethod(
        Invocation.method(
          #addUser,
          [user],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateUser(_i10.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteUser(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
